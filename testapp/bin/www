#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('testapp:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const update_server = require('http').createServer();
const io = require('socket.io')(update_server, {
    cors: { origin: '*'}
});


/**
 * Listen on provided port, on all network interfaces.
 */
const { loadCount, writeCount } = require('../public/javascripts/count-tracker');

const view_count_file = 'public/lib/view-count.txt';
let view_count = 0;
loadCount(view_count_file).then(recorded_count => {
  view_count += recorded_count;
  console.log(view_count);
});
 
 
let connect_count = 0;
io.on('connection', socket => {
  connect_count++;
  view_count++;
  writeCount(view_count_file, view_count);
  console.log('New Connection!');
  console.log({view_count, connect_count});
  io.emit('update', {views: view_count, connections: connect_count});
  socket.on('disconnect', socket => {
    connect_count--;
    console.log('Connection lost...');
    console.log({view_count, connect_count})
    io.emit('update', {views: view_count, connections: connect_count});
  });
});
update_server.listen(8080, () => console.log(`App available on http://localhost:${8080}`));

server.on('error', onError);
server.on('listening', onListening);
server.listen(port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
